48562 function calls (48397 primitive calls) in 2.046 CPU seconds

Filename: classes/Comparador.py

Line #    Mem usage    Increment   Line Contents
================================================
    61   12.062 MiB    0.000 MiB     @profile
    62                               def reporte(self, dias=30):
    63   12.066 MiB    0.004 MiB       self.logger.info("Generando reporte")
    64                             
    65                                 #Levanto los csv y actualizo sincronizo mergeo los cambios con mis objetos
    66   12.066 MiB    0.000 MiB       with open(self.rutaDnsBaneados, "rb")as f:
    67   12.066 MiB    0.000 MiB           lector = csv.reader(f, delimiter=" ")
    68   63.586 MiB   51.520 MiB           for fila in lector:
    69   63.586 MiB    0.000 MiB               if fila not in self.listadoDnsaddrBaneadas:
    70   63.586 MiB    0.000 MiB                   self.listadoDnsaddrBaneadas.append(fila)
    71                             
    72                                 #Levanto las ip ya benadas
    73   63.582 MiB   -0.004 MiB       with open(self.rutaIpBaneados, "rb")as f:
    74   63.582 MiB    0.000 MiB           lector = csv.reader(f, delimiter=" ")
    75   63.633 MiB    0.051 MiB           for fila in lector:
    76   63.633 MiB    0.000 MiB               if fila not in self.listadoIpaddrBaneadas:
    77   63.633 MiB    0.000 MiB                   self.listadoIpaddrBaneadas.append(fila)
    78                             
    79                             
    80                                 #Lo hago antes que sobre el access.log para mantener los comentarios
    81                                 #y no sobreescribirlo
    82   63.633 MiB    0.000 MiB       for ipaddrF in self.ipaddrFile:
    83   63.633 MiB    0.000 MiB           for ip in ipaddrF.usuarios.keys():
    84   63.633 MiB    0.000 MiB               if ip not in self.usuarios or not self.acceso_reciente(self.usuarios[ip].time, dias):
    85   63.633 MiB    0.000 MiB                   usuario = ipaddrF.usuarios[ip]
    86                                             #Genero la linea del csv
    87   63.633 MiB    0.000 MiB                   if ip not in [x[0]  for x in  self.listadoIpaddrBaneadas]:
    88                                                 lineaAGuardar = [usuario.ip,"#"+usuario.descripcion]
    89                                                 self.listadoIpaddrBaneadas.append(lineaAGuardar)
    90                             
    91                                 #Baneo las del access.log
    92   63.633 MiB    0.000 MiB       for usuario in self.usuarios.values():
    93   63.633 MiB    0.000 MiB           ip = usuario.ip
    94   63.633 MiB    0.000 MiB           if not self.acceso_reciente(usuario.time, dias):
    95                                         #compruebo que la ip no este en la lista de baneados
    96                                         if ip not in [x[0]  for x in  self.listadoIpaddrBaneadas]:
    97                                             #print ip
    98                                             lineaAGuardar = [ip,"#"]
    99                                             self.listadoIpaddrBaneadas.append(lineaAGuardar)
   100                             
   101                             
   102   63.641 MiB    0.008 MiB       for dnsaddrF in self.dnsaddrFile:
   103   63.641 MiB    0.000 MiB           for dns in dnsaddrF.usuarios.keys():
   104   63.637 MiB   -0.004 MiB               ip = dnsaddrF.usuarios[dns].ip
   105   63.637 MiB    0.000 MiB               if ip not in self.usuarios or not self.acceso_reciente(self.usuarios[ip].time, dias) or ip == "666.666.666.666":
   106   63.637 MiB    0.000 MiB                   usuario = dnsaddrF.usuarios[dns]
   107                                             #Genero la linea del csv
   108   63.641 MiB    0.004 MiB                   lineaAGuardar = [usuario.dns,"#"+usuario.descripcion]
   109                                             #no lo agrego si es que ya esta
   110   63.641 MiB    0.000 MiB                   if lineaAGuardar not in self.listadoDnsaddrBaneadas:
   111   63.641 MiB    0.000 MiB                       self.listadoDnsaddrBaneadas.append(lineaAGuardar)
   112                             
   113                                 #Quito las ip que estan de mas. OPTIMIZABLE
   114   63.641 MiB    0.000 MiB       ipRecuperadas = []
   115   63.641 MiB    0.000 MiB       for sublista in self.listadoIpaddrBaneadas:
   116   63.641 MiB    0.000 MiB           ip = sublista[0]
   117   63.641 MiB    0.000 MiB           if ip not in self.usuarios or  not self.acceso_reciente(self.usuarios[ip].time, dias):
   118   63.641 MiB    0.000 MiB               ipRecuperadas.append(sublista)
   119   63.641 MiB    0.000 MiB       for sublista in self.listadoIpaddrBaneadas:
   120   63.641 MiB    0.000 MiB           if sublista not in ipRecuperadas:
   121                                         self.listadoIpaddrBaneadas.remove(sublista)
   122   63.641 MiB    0.000 MiB       del(ipRecuperadas)
   123                             
   124   63.641 MiB    0.000 MiB       dnsRecuperadas = []
   125   63.641 MiB    0.000 MiB       for sublista in self.listadoDnsaddrBaneadas:
   126   63.641 MiB    0.000 MiB           if dnsaddrF.usuarios.has_key(sublista[0]):
   127   63.641 MiB    0.000 MiB               ip = dnsaddrF.usuarios[sublista[0]].ip
   128   63.641 MiB    0.000 MiB               if ip not in self.usuarios or  not self.acceso_reciente(self.usuarios[ip].time, dias):
   129   63.641 MiB    0.000 MiB                   dnsRecuperadas.append(sublista)
   130   63.641 MiB    0.000 MiB       for sublista in dnsRecuperadas:
   131   63.641 MiB    0.000 MiB           self.listadoDnsaddrBaneadas.remove(sublista)
   132   63.641 MiB    0.000 MiB       del(dnsRecuperadas)
   133                             
   134   63.641 MiB    0.000 MiB       with open(self.rutaDnsBaneados, "wb") as f:
   135   63.641 MiB    0.000 MiB           escritor = csv.writer(f, delimiter=" ")
   136   63.672 MiB    0.031 MiB           for fila in self.listadoDnsaddrBaneadas:
   137   63.672 MiB    0.000 MiB                   escritor.writerow(fila)
   138                             
   139   63.668 MiB   -0.004 MiB       with open(self.rutaIpBaneados, "wb") as f:
   140   63.668 MiB    0.000 MiB           escritor = csv.writer(f, delimiter=" ")
   141   63.672 MiB    0.004 MiB           for fila in self.listadoIpaddrBaneadas:
   142                                         #if not self.acceso_reciente(self.usuarios[fila[0]].time, dias):
   143   63.672 MiB    0.000 MiB               escritor.writerow(fila)
   
   -- MAS COMPLETO --

[root@csjn18 squidban]# python -m memory_profiler  squidcontrol.py
squidcontrol.py:62: UserWarning: psutil module not found. memory_profiler will be slow
  def prepareLogging(self):
Filename: classes/ArchivoLog.py

Line #    Mem usage    Increment   Line Contents
================================================
    22    9.777 MiB    0.000 MiB      @profile
    23                                def load(self):
    24                                  #self.load_historico()
    25    9.777 MiB    0.000 MiB        try:
    26    9.777 MiB    0.000 MiB           with open(self.path, "r") as f:
    27    9.781 MiB    0.004 MiB               self.logger.debug("Revisando log actual")
    28   13.793 MiB    4.012 MiB               filas = list(f)
    29   13.793 MiB    0.000 MiB               cantidad = len(filas) - self.ultimo
    30   13.793 MiB    0.000 MiB               if cantidad > 0:
    31   13.895 MiB    0.102 MiB                   for f in filas[self.ultimo:]:
    32   13.895 MiB    0.000 MiB                       linea = f.split() # contenido linea
    33   13.895 MiB    0.000 MiB                       register = Registro()
    34   13.895 MiB    0.000 MiB                       register.ip = linea[2]
    35   13.895 MiB    0.000 MiB                       register.time = float(linea[0])
    36   13.895 MiB    0.000 MiB                       self.accesos[register.ip] = register
    37   13.895 MiB    0.000 MiB                   self.logger.info("Se han registrado %d nuevos registros", cantidad)
    38   13.891 MiB   -0.004 MiB                   self.ultimo += cantidad
    39                                         # Verificamos si el squid hizo rotacion de logs
    40                                         elif cantidad < 0:
    41                                             self.ultimo = 0
    42                                             self.load()
    43
    44                                  except IOError:
    45                                     self.logger.error("No se ha podido acceder al archivo %s", self.path)
    46                                     raise


   
   
   
   
   Filename: classes/Comparador.py

Line #    Mem usage    Increment   Line Contents
================================================
    43    9.777 MiB   -4.113 MiB     @profile
    44                               def registrar(self, procesarHistorico=False):
    45                                 """Registra los accesos del accesslog"""
    46                                 #Cargo el archivo del log
    47    9.777 MiB    0.000 MiB       if procesarHistorico == True:
    48                                     self.logFile.load_historico()
    49                                 self.logFile.load()
    50   13.891 MiB    4.113 MiB       self.logger.debug("Registrando cambios")
    51
    52                                 #Cargo los accesos
    53   13.891 MiB    0.000 MiB       for acceso in self.logFile.accesos.values():
    54   13.891 MiB    0.000 MiB           usuario = Registro()
    55   13.891 MiB    0.000 MiB           usuario.ip = acceso.ip
    56   13.891 MiB    0.000 MiB           usuario.time = acceso.time
    57   13.891 MiB    0.000 MiB           self.usuarios[usuario.ip] = usuario
    58   13.891 MiB    0.000 MiB           self.logger.debug("%s - %s", self.utc2string(usuario.time), usuario.ip)
    59   13.891 MiB    0.000 MiB           self.cambios = True
    60   13.891 MiB    0.000 MiB           self.logFile.accesos.clear()


   
   
   
   Filename: classes/Comparador.py

Line #    Mem usage    Increment   Line Contents
================================================
    62   13.898 MiB    0.000 MiB     @profile
    63                               def reporte(self, dias=30):
    64   13.898 MiB    0.000 MiB       self.logger.info("Generando reporte")
    65
    66                                 #Levanto los csv y actualizo sincronizo mergeo los cambios con mis objetos
    67   13.898 MiB    0.000 MiB       with open(self.rutaDnsBaneados, "rb")as f:
    68   13.898 MiB    0.000 MiB           lector = csv.reader(f, delimiter=" ")
    69   63.594 MiB   49.695 MiB           for fila in lector:
    70   63.594 MiB    0.000 MiB               if fila not in self.listadoDnsaddrBaneadas:
    71   63.594 MiB    0.000 MiB                   self.listadoDnsaddrBaneadas.append(fila)
    72
    73
    74                                 #Levanto las ip ya benadas
    75   63.590 MiB   -0.004 MiB       with open(self.rutaIpBaneados, "rb")as f:
    76   63.590 MiB    0.000 MiB           lector = csv.reader(f, delimiter=" ")
    77   63.641 MiB    0.051 MiB           for fila in lector:
    78   63.641 MiB    0.000 MiB               if fila not in self.listadoIpaddrBaneadas:
    79   63.641 MiB    0.000 MiB                   self.listadoIpaddrBaneadas.append(fila)
    80
    81                                 #Lo hago antes que sobre el access.log para mantener los comentarios
    82                                 #y no sobreescribirlo
    83   63.641 MiB    0.000 MiB       for ipaddrF in self.ipaddrFile:
    84   63.641 MiB    0.000 MiB           for ip in ipaddrF.usuarios.keys():
    85   63.641 MiB    0.000 MiB               if ip not in self.usuarios or not self.acceso_reciente(self.usuarios[ip].time, dias):
    86   63.641 MiB    0.000 MiB                   usuario = ipaddrF.usuarios[ip]
    87                                             #Genero la linea del csv
    88   63.641 MiB    0.000 MiB                   if ip not in [x[0]  for x in  self.listadoIpaddrBaneadas]:
    89                                                 lineaAGuardar = [usuario.ip,"#"+usuario.descripcion]
    90                                                 self.listadoIpaddrBaneadas.append(lineaAGuardar)
    91
    92                                 #Baneo las del access.log
    93   63.641 MiB    0.000 MiB       for usuario in self.usuarios.values():
    94   63.641 MiB    0.000 MiB           ip = usuario.ip
    95   63.641 MiB    0.000 MiB           if not self.acceso_reciente(usuario.time, dias):
    96                                         #compruebo que la ip no este en la lista de baneados
    97                                         if ip not in [x[0]  for x in  self.listadoIpaddrBaneadas]:
    98                                             #print ip
    99                                             lineaAGuardar = [ip,"#"]
   100                                             self.listadoIpaddrBaneadas.append(lineaAGuardar)
   101
   102
   103   63.648 MiB    0.008 MiB       for dnsaddrF in self.dnsaddrFile:
   104   63.648 MiB    0.000 MiB           for dns in dnsaddrF.usuarios.keys():
   105   63.645 MiB   -0.004 MiB               ip = dnsaddrF.usuarios[dns].ip
   106   63.645 MiB    0.000 MiB               if ip not in self.usuarios or not self.acceso_reciente(self.usuarios[ip].time, dias) or ip == "666.666.666.666":
   107   63.645 MiB    0.000 MiB                   usuario = dnsaddrF.usuarios[dns]
   108                                             #Genero la linea del csv
   109   63.648 MiB    0.004 MiB                   lineaAGuardar = [usuario.dns,"#"+usuario.descripcion]
   110                                             #no lo agrego si es que ya esta
   111   63.648 MiB    0.000 MiB                   if lineaAGuardar not in self.listadoDnsaddrBaneadas:
   112   63.648 MiB    0.000 MiB                       self.listadoDnsaddrBaneadas.append(lineaAGuardar)
   113
   114                                 #Quito las ip que estan de mas. OPTIMIZABLE
   115   63.648 MiB    0.000 MiB       ipRecuperadas = []
   116   63.648 MiB    0.000 MiB       for sublista in self.listadoIpaddrBaneadas:
   117   63.648 MiB    0.000 MiB           ip = sublista[0]
   118   63.648 MiB    0.000 MiB           if ip not in self.usuarios or  not self.acceso_reciente(self.usuarios[ip].time, dias):
   119   63.648 MiB    0.000 MiB               ipRecuperadas.append(sublista)
   120   63.648 MiB    0.000 MiB       for sublista in self.listadoIpaddrBaneadas:
   121   63.648 MiB    0.000 MiB           if sublista not in ipRecuperadas:
   122                                         self.listadoIpaddrBaneadas.remove(sublista)
   123   63.648 MiB    0.000 MiB       del(ipRecuperadas)
   124
   125   63.648 MiB    0.000 MiB       dnsRecuperadas = []
   126   63.648 MiB    0.000 MiB       for sublista in self.listadoDnsaddrBaneadas:
   127   63.648 MiB    0.000 MiB           if dnsaddrF.usuarios.has_key(sublista[0]):
   128   63.648 MiB    0.000 MiB               ip = dnsaddrF.usuarios[sublista[0]].ip
   129   63.648 MiB    0.000 MiB               if ip not in self.usuarios or  not self.acceso_reciente(self.usuarios[ip].time, dias):
   130   63.648 MiB    0.000 MiB                   dnsRecuperadas.append(sublista)
   131   63.648 MiB    0.000 MiB       for sublista in dnsRecuperadas:
   132   63.648 MiB    0.000 MiB           self.listadoDnsaddrBaneadas.remove(sublista)
   133   63.648 MiB    0.000 MiB       del(dnsRecuperadas)
   134
   135   63.648 MiB    0.000 MiB       with open(self.rutaDnsBaneados, "wb") as f:
   136   63.648 MiB    0.000 MiB           escritor = csv.writer(f, delimiter=" ")
   137   63.680 MiB    0.031 MiB           for fila in self.listadoDnsaddrBaneadas:
   138   63.680 MiB    0.000 MiB                   escritor.writerow(fila)
   139
   140   63.676 MiB   -0.004 MiB       with open(self.rutaIpBaneados, "wb") as f:
   141   63.676 MiB    0.000 MiB           escritor = csv.writer(f, delimiter=" ")
   142   63.680 MiB    0.004 MiB           for fila in self.listadoIpaddrBaneadas:
   143                                         #if not self.acceso_reciente(self.usuarios[fila[0]].time, dias):
   144   63.680 MiB    0.000 MiB               escritor.writerow(fila)


 
 
 
 
 
 
 
 
 Filename: classes/Comparador.py

Line #    Mem usage    Increment   Line Contents
================================================
   146    8.910 MiB    0.000 MiB     @profile
   147                               def cargar(self):
   148    8.922 MiB    0.012 MiB       self.logger.info("Intentado cargar base de datos")
   149    8.922 MiB    0.000 MiB       self.usuarios = {}
   150    9.090 MiB    0.168 MiB       for ipaddrF in self.ipaddrFile:
   151    9.086 MiB   -0.004 MiB           ipaddrF.load()
   152    9.090 MiB    0.004 MiB       self.cambios = False
   153    9.090 MiB    0.000 MiB       try:
   154    9.090 MiB    0.000 MiB           with open(self.dbfile, "r") as f:
   155    9.129 MiB    0.039 MiB               self.usuarios = cPickle.load(f)
   156
   157                                 except:
   158                                   self.logger.warn("No se ha podido acceder a la base de datos en %s, creando una nueva", self.dbfile)
   159                                   self.registrar()
   160                                   pass;

